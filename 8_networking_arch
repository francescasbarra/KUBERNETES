# K8S NETWORKING ARCHITECTURAL OVERVIEW

# 1 KUBERNETES NETWORK MODEL

# 2 NETWORK MODEL ARCHITECTURE

-----

# 1 KUBERNETES NETWORK MODEL
set di standard che definiscono come si comporta il networking tra i pods
ci sono diverse implementazioni in questo modello tra cui "calico network plugin"

- definisce come i pod comunicano tra loro, indipendentemente dal nodo sui quali sono eseguiti

# ogni POD ha un suo ip univoco nel cluster, anche se si trovano su nodi diversi, proprio perchè possono comunicare tra loro
ciò crea una "virtual network" per l'intero cluster 


----------

# 1 CNI plugins
  sono tipi di network plugin che forniscono connettività di rete tra i pods secondo gli standard definiti nel modello di rete kubernetes
"CNI" Container Network Interface, standard per gestire la connettività di rete nei container.
CNI plugin è un modulo che implementa questo standard per configurare e gestire le reti dei container, assegnando IP, configurando il routing e applicando policy di rete.

# 2 Selecting a Network Plugin
  come selezionare i network plugin migliori in base alle esigenze, alle situazioni specifiche
  consultare la documentazione k8s per avere la lista dei plugin disponibili
in questo corso viene usato "CALICO" 


# 3 Installing Network Plugin
  ogni plugin ha un suo processo di installazione

IMPORTANT "i nodi kubernetes rimangono "not ready" finchè un network plugin non viene installato, non si può eseguire pod altrimenti"

kubectl apply -f https://docs.projectcalico.org/v3.14/manifests/calico.yaml

per installare il network plug in "calico"




-------------


# UNDERSTANDING K8S DNS

1 DNS in k8s
2 Podman Domain Names

# DNS in K8S
  la rete virtuale di k8s usa un DNS (Domain Name System) per permettere ai Pod di individiare altri Pod e Servizi usando nomi di dominio invece di indirizzi IP

  Il DNS è in running come "servizio" (come un pod)  all'interno del cluster, di solito i suoi componenti si trovano nel namespace "kube-system"
# kubeadm clusters usano CoreDNS

-------------

# POD DOMAIN NAMES
  A tutti i pod del kubeadm cluster viene assegnato automaticamente nome di dominio con la seguente forma:
# <pod-ip-address>.<namespace-name>.<pod>.<cluster.local>
   pod name? 
#  192-168-10-100.default.pod.cluster.local

pod domain names diventa + utile quando si parla di servizi

-------------

ESEMPIO 

# creo 2 pod all'interno dello stesso yaml (per separare gli oggetti nello stesso file uso --- )
  kubectl get pod nginx-dnstest -o wide
NAME            READY   STATUS    RESTARTS   AGE   IP                NODE       NOMINATED NODE   READINESS GATES
nginx-dnstest   1/1     Running   0          35s   192.168.133.206   worker-2   <none>           <none>

# uso l'ip del pod nginx-dnstest per eseguire una curl ad esso all'interno del primo pod, busybox  
  kubectl exec busybox-dnstest -- curl 192.168.133.206

---

# kubectl get pod -n kube-system    (lì si troveranno componenti DNS, i server)

francesca@ubuntu:~$ k get pod -n kube-system 
NAME                                       READY   STATUS    RESTARTS      AGE
calico-kube-controllers-658d97c59c-599mn   1/1     Running   22 (8h ago)   28d
calico-node-8rdv4                          1/1     Running   23 (8h ago)   28d
calico-node-swgrz                          1/1     Running   6 (8h ago)    10d
calico-node-z27wv                          1/1     Running   22 (8h ago)   28d
"coredns-5dd5756b68-pgkrn"                   1/1     Running   22 (8h ago)   28d
"coredns-5dd5756b68-rbvzn"                   1/1     Running   22 (8h ago)   28d
etcd-ubuntu                                1/1     Running   75 (8h ago)   28d
kube-apiserver-ubuntu                      1/1     Running   70 (8h ago)   28d
kube-controller-manager-ubuntu             1/1     Running   32 (8h ago)   28d
kube-proxy-c9shl                           1/1     Running   23 (8h ago)   28d
kube-proxy-lwkw2                           1/1     Running   23 (8h ago)   28d
kube-proxy-mdxt2                           1/1     Running   6 (8h ago)    10d
kube-scheduler-ubuntu                      1/1     Running   32 (8h ago)   28d
metrics-server-54d55fc76c-m6kpt            1/1     Running   28 (8h ago)   12d


--------------

# kubectl get service -n kube-system  (qui possiamo trovare il servizio kube-dns)

NAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                  AGE
"kube-dns"         ClusterIP   10.96.0.10      <none>        53/UDP,53/TCP,9153/TCP   28d
metrics-server     ClusterIP   10.109.61.219   <none>        443/TCP                  12d


-------------

# kubectl exec busybox-dnstest -- nslookup 192-168-133-206.francesca.pod.cluster.local

"nslookup" serve a cercare l'indirizzo IP associato a un nome di dominio

-----



