SERVICES

# I "services" k8s forniscono un modo per esporre un'applicazione in esecuzione come un insieme di pod
forniscono un metodo astratto per consentire ai client di accedere alle app senza dover conoscere i pod dell'applicazione
# Un service è un intermediario tra client e pod

# Service routing
  i clienti fanno richieste al Service che indirizza, instrada (route), il traffico ai suoi pod in modo bilanciato 

----------------------------------------------------
# pod    pod   pod           ognuno dei pod rappresenta un ENDPOINT per il service


#     service        <-----  client 
                             fa richiesta al service
indirizza il traffico 
e lo bilancia tra i pod

----------------------------------------------------

# ENDPOINTS
sono le entità di backend a cui i servizi instradano il traffico, pod o altri servizi che ricevono richieste dal service.
Per un service che instrada il traffico a + pod, ogni pod avrà un "endpoint" associato al service

#  un modo per determinare verso quale pod il service sta instradando il traffico è vedere l'endpoint del service

---------

USING K8S SERVICES 

# SERVICE TYPES

Ogni servizio ha un "type" e il 
#Service Type definisce come e dove il servizio esporrà l'applicazione

4 SERVICE TYPE

# 1 Cluster Ip 
per l'esposizione dei pod all'interno del cluster
# 2 NodePort
per esporre i pod in rete
# 3 LoadBalancer
# 4 ExternalName (outside the scope of cka)

------------- 

# CLUSTER IP SERVICE
espone l'applicazione all'interno del cluster
da usare quando i client sono gli altri pod del cluster

# NodePort Service
espone i pod all'esterno della rete del cluster
da usare quando applicazioni o utenti accedono dall'esterno del cluster alla tua applicazione

# LoadBalancer Service 
espone le applicazioni anche all'esterno della rete del cluster, ma per farlo usano un bilanciatore di carico cloud esterno.
questo servizio funziona solo con piattaforme cloud che includono funzionalità del bilanciamento di carico

# ExternalName 

------------------

esempio

apiVersion: v1
kind: Service
metadata:
  name: svc-clusterip
spec:
  type: ClusterIP  # se non si specifica il tipo va di default ClusterIp
  selector:
    app: svc-example  # determina a quali pod il servizio indirizza il traffico/ il selector dei pod era indicato nel template del deployment
  ports:
  - protocol: TCP
    port: 80  # si possono indicare anche + porte, i client che comunicano col service useranno la porta 80
    targetPort: 80    # determina la porta che il service sta indirizzando ai backend pod, la porta su cui ascoltano i pod
 
    nodePort: 30080  #si aggiunge dopo targetport per i service nodeport, è la porta che i pod ascolteranno esternamente (se non si specifica, k8s ne assegna una di default)


-----------------

# COME VEDERE GLI ENDPOINTS DEI SERVICE (I POD)

kubectl get endpoints svc-clusterip  # kubectl get endpoints nome.servizio 
NAME            ENDPOINTS                                                 AGE
svc-clusterip   192.168.133.227:80,192.168.226.68:80,192.168.243.224:80   118s

escono gli indirizzi IP dei pod con la porta definita

# UNA VOLTA CREATO IL SERVIZIO DOBBIAMO TESTARLO ALL'INTERNO DEL CLUSTER, DOBBIAMO CREARE UN POD CHE COMUNICHI CON IL SERVIZIO

FACCIAMO UN POD PER TESTARE IL FUNZIONAMENTO

-------------

# NSLOOKUP

Il comando nslookup (Name Server Lookup) serve per interrogare i server DNS e ottenere informazioni sulla risoluzione dei nomi di dominio, ovvero tradurre un nome host in indirizzo IP (e viceversa).

nslookup google.com

Server:   192.168.1.1
Address:  192.168.1.1#53

Non-authoritative answer:
Name:    google.com
Address: 142.250.180.206

Server: indica quale server DNS hai usato per fare la richiesta.

Address: è l'IP associato al dominio.

Non-authoritative answer: significa che il server ti ha fornito una risposta che ha preso in prestito da un altro DNS (cache o forwarding).

---------------


